name: Axity Infra Ops Lab CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/axity-lab-app
  WEBHOOK_IMAGE_NAME: ${{ github.repository }}/axity-webhook-receiver

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r infra/docker/app/requirements.txt
          pip install -r app/webhook_receiver/requirements.txt
          pip install pytest httpx

      - name: Run Python tests
        run: |
          python -m pytest --version || echo "pytest not available, skipping tests"
          # Add actual test commands here when tests are available

      - name: Validate YAML files
        run: |
          python -c "import yaml; [yaml.safe_load(open(f)) for f in ['infra/k8s/namespace.yaml', 'infra/k8s/deployment.yaml', 'infra/k8s/service.yaml', 'infra/k8s/kustomization.yaml']]"
          python -c "import yaml; [yaml.safe_load(open(f)) for f in ['infra/monitoring/prometheus.yml', 'infra/monitoring/alertmanager.yml', 'infra/monitoring/alert_rules.yml']]"
          python -c "import yaml; yaml.safe_load(open('docker-compose.glpi.yml'))"

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for main app
        id: meta-app
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push main app image
        uses: docker/build-push-action@v5
        with:
          context: ./infra/docker/app
          file: ./infra/docker/app/Dockerfile
          push: true
          tags: ${{ steps.meta-app.outputs.tags }}
          labels: ${{ steps.meta-app.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for webhook receiver
        id: meta-webhook
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.WEBHOOK_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push webhook receiver image
        uses: docker/build-push-action@v5
        with:
          context: ./app/webhook_receiver
          file: ./app/webhook_receiver/Dockerfile
          push: true
          tags: ${{ steps.meta-webhook.outputs.tags }}
          labels: ${{ steps.meta-webhook.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  validate-kubernetes:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Validate Kubernetes manifests
        run: |
          kubectl apply --dry-run=client -k infra/k8s/

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  ansible-lint:
    name: Lint Ansible Playbooks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible and ansible-lint
        run: |
          pip install ansible ansible-lint

      - name: Lint Ansible playbooks
        run: |
          ansible-lint infra/ansible/playbooks/*.yml || true

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, build-and-push, validate-kubernetes, security-scan, ansible-lint]
    if: always()
    steps:
      - name: Notify on success
        if: ${{ needs.test.result == 'success' && needs.build-and-push.result == 'success' }}
        run: |
          echo "‚úÖ CI/CD Pipeline completed successfully!"
          echo "üöÄ Docker images built and pushed to GitHub Container Registry"
          echo "üì¶ Images available at:"
          echo "   - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "   - ${{ env.REGISTRY }}/${{ env.WEBHOOK_IMAGE_NAME }}:latest"

      - name: Notify on failure
        if: ${{ needs.test.result == 'failure' || needs.build-and-push.result == 'failure' }}
        run: |
          echo "‚ùå CI/CD Pipeline failed!"
          echo "Please check the logs for more details."
          exit 1